
#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<unistd.h>
#include <sys/wait.h>
int giris_bekle();

char* satir_oku();

char** okunan_degeri_parcala();
   

int calistir(char**);

int main(int argc, char** argv) {

     
    while(1){ 
    
   int contin =  giris_bekle();
    
   if(contin == 0) break;
    
    }
    printf("Terminal sonlandirildi ...:true");
    return (EXIT_SUCCESS);
}

int giris_bekle(){
    
    
    char* satir;
     
    printf(">");
    
    satir = satir_oku();
    
    char** kelimeler = okunan_degeri_parcala(satir);
    
    int cont = calistir(kelimeler);
     
    return cont;
}

char* satir_oku(){
    
    int index = 0;
    
    const int metin_uzunlugu = 500;
     
    char* metin = malloc(sizeof(char)*metin_uzunlugu);
    
    int ch;
    
    while(1){ 
        
        ch = getchar(); 
        
        if(ch == '\n'){ metin[index] = '\0'; return metin;} 
        
        else metin[index++] = ch;
    }
    
}

char** okunan_degeri_parcala(char* satir){
 
    
    int kelime_adedi = 0;

    char* pch;
    
    char** kelimeler = malloc(sizeof(char*) * 20);
    
    pch = strtok(satir," ");
    
    while(pch !=NULL){
        
        kelimeler[kelime_adedi++] = pch;
        
        pch = strtok(NULL," ");
        
    }
    kelimeler[kelime_adedi] = NULL;
    
    return kelimeler;
    
}

int calistir(char** komut){
   
 
 
/*

    int i = 0;
 
    do{
        printf("%s\n",komut[i]);
    }while(komut[i++]!=NULL);
    
 
*/
    if(!strcmp(komut[0],"quit")){       // quit gelirse , proseslerin sonuclanmasini bekle ven sonlan..
        
        wait(NULL) ;
        
        return 0;
    }
            
    else{
        
        int pid = fork();

        if(pid == 0){
            // child proses
 
            int i =   execvp(komut[0],komut);

            if( i == -1) perror("hata");
 
        }
        if(pid > 0){
            // perent proses
            
            wait(NULL);

        }

         return 1; 
    }
}
